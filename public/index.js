/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*************************!*\
  !*** ./src/ui/index.ts ***!
  \*************************/
const SPACE="&nbsp;";class GraphQLValidator{constructor(inputID,outputID){this.input=new Lazy(()=>document.getElementById(inputID));this.output=new Lazy(()=>document.getElementById(outputID))}async start(){await this.validate();this.input.handle.addEventListener("keyup",async()=>{await this.validate()})}async validate(){const graphql=this.input.handle.value.toString();const graphqlLines=graphql.split("\n");console.log("validating");const output=await fetch("/",{method:"POST",body:graphql});const json=await output.json();let pretties=[];const diagnostics=json["diagnostics"];if(diagnostics.length>0){for(const diagnostic of diagnostics){const severity=diagnostic["severity"];let severityColor="text-info";let severityEmoji="\uD83D\uDCA1";switch(severity){case"warning":{severityColor="text-warning";severityEmoji="⚠️";break}case"error":{severityColor="text-error";severityEmoji="❌";break}}let inner=`<code class="m-3 block whitespace-pre overflow-x-scroll">`;const code=diagnostic["code"];inner+=`<span class=${severityColor}>${code}</span>`;const message=diagnostic["message"];inner+=`<br/><span class="text-content">${SPACE}${severityEmoji}${SPACE}${message}</span>`;const labels=diagnostic["labels"];for(const l of labels){console.log("reading labels");const labelSpan=l["span"];let labelOffset=labelSpan["offset"];const labelLength=labelSpan["length"];let lineIdx=0;let inline=[];let lastLine=false;for(let graphqlLine of graphqlLines){let maybeHighlightSpace="";lineIdx+=1;let maybeLine="";if(labelOffset>0||lastLine){maybeLine+=`<br/><span class="secondary-content">${SPACE}${lineIdx}${SPACE}|</span><span class="primary-content">${SPACE}${SPACE}`;console.log(`graphqlLine: ${graphqlLine}`);for(let i=0;i<graphqlLine.length;i++){maybeLine+=graphqlLine.charAt(i);labelOffset-=1;if(labelOffset> -2){maybeHighlightSpace+=SPACE}}maybeLine+="</span>"}console.log(`labelOffset: ${labelOffset}`);console.log(`maybeLine: ${maybeLine}`);console.log(`highlightSpace: ${maybeHighlightSpace}`);inline.push({maybeLine,maybeLineIdx:lineIdx,maybeHighlightSpace});if(labelOffset<=0&&!lastLine){lastLine=true}else if(lastLine){break}}let realHighlightSpace="";for(const maybeInline of inline.slice(-4)){console.log(`maybeInline: ${JSON.stringify(maybeInline)}`);if(maybeInline){const{maybeLineIdx,maybeHighlightSpace:maybeHighlightSpace1,maybeLine:maybeLine1}=maybeInline;inner+=maybeLine1;if(maybeLineIdx==lineIdx-1){realHighlightSpace=maybeHighlightSpace1;let highlight="";let labelSpace="";for(let i1=0;i1<labelLength;i1++){highlight+="─";if(i1<labelLength/2){labelSpace+=SPACE}}inner+=`<br/><span class="text-info">${SPACE}${SPACE}${SPACE}\xb7${realHighlightSpace}${highlight}</span>`;const label=l["label"];inner+=`<br/><span class="text-info">${SPACE}${SPACE}${SPACE}\xb7${realHighlightSpace}${labelSpace}╰──${label}</span>`}}}}inner+="</code>";pretties.push(inner)}this.output.handle.innerHTML=pretties.join("")}else{this.output.handle.innerHTML=`<code class="text-success center">✅ Your GraphQL is looking great!</span>`}}}class Lazy{instance=null;constructor(initializer){this.initializer=initializer}get handle(){console.log(`----- getting handle ------`);if(this.instance==null){this.instance=this.initializer();console.log(`first-time init of '${this.instance.id}'`)}else{console.log(`fast-grab of '${this.instance.id}'`)}console.log(`----- return handle -------`);return this.instance}}const load=async()=>{const validator=new GraphQLValidator("graphql","diagnostics");validator.start()};window.addEventListener("load",load)
/******/ })()
;
//# sourceMappingURL=index.js.map